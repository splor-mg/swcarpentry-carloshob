filenames <- list.files()
filenames
filenames[1:3]
analyze <- function(filename) {
# Plots the average, min, and max inflammation over time.
# Input is character string of a csv file.
dat <- read.csv(filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
}
filenames <- list.files(path = "data",
# Now follows a regular expression that matches:
pattern = "inflammation-[0-9]{2}.csv",
#          |            |        the standard file extension of comma-separated values
#          |            the variable parts (two digits, each between 0 and 9)
#          the static part of the filenames
full.names = TRUE)
filenames <- filenames[1:3]
for (f in filenames) {
print(f)
analyze(f)
}
list.files(data)
list.files("data")
filenames <- list.files(path = "data",
# Now follows a regular expression that matches:
pattern = "inflammation-[0-12]{2}.csv",
#          |            |        the standard file extension of comma-separated values
#          |            the variable parts (two digits, each between 0 and 9)
#          the static part of the filenames
full.names = TRUE)
for (f in filenames) {
print(f)
analyze(f)
}
list.files("data")
filenames <- list.files(path = "data",
# Now follows a regular expression that matches:
pattern = "inflammation-[0-9]{2}.csv",
#          |            |        the standard file extension of comma-separated values
#          |            the variable parts (two digits, each between 0 and 9)
#          the static part of the filenames
full.names = TRUE)
for (f in filenames) {
print(f)
analyze(f)
}
filenames <- list.files(path = "data",
# Now follows a regular expression that matches:
pattern = "inflammation-[0-12]{2}.csv",
#          |            |        the standard file extension of comma-separated values
#          |            the variable parts (two digits, each between 0 and 9)
#          the static part of the filenames
full.names = TRUE)
for (f in filenames) {
print(f)
analyze(f)
}
list.files
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
}
len
for (v in vowels) {
len <- len + 1
return(len)
}
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
return(len)
}
len
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
return(len)
}
len
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
}
len
for (v in vowels) {
len <- len + 1
print(len)
}
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
print(len)
}
filenames <- filenames[1:3]
for (f in filenames) {
print(f)
analyze(f)
}
filenames <- filenames[1:3]
#processing multiple files# ---
?list.files()
list.files("data","csv")
filenames <- list.files()
filenames <- filenames[1:3]
filenames <- list.files(path = "data",
# Now follows a regular expression that matches:
pattern = "inflammation-[0-9]{2}.csv",
#          |            |        the standard file extension of comma-separated values
#          |            the variable parts (two digits, each between 0 and 9)
#          the static part of the filenames
full.names = TRUE)
analyze <- function(filename) {
# Plots the average, min, and max inflammation over time.
# Input is character string of a csv file.
dat <- read.csv(filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
}
analyze("data/inflammation-01.csv")
pdf("inflammation-01.pdf")
pdf("inflammation-01.pdf")
analyze("data/inflammation-01.csv")
dev.off()
dev.cur()
dev.cur()
num <- 37
num <- 37
if (num > 100) {
print("greater")
}
else {
if (num > 100) {
print("greater")
} else {
print("not greater")
}
print("done")
sign <- function(num) {
if (num > 0) {
return("+")
} else if(num = 0) {
sign <- function(num) {
if (num > 0) {
return(1)
} else if(num = 0) {
sigma(-3)
sign <- function(num) {
if(num > 0) {
return(1)
} else if(num = 0) {
sign <- function(num) {
if(num > 0) {
return(1)
} else if(num == 0) {
return(0)
} else {
return(-1)
}
}
sign <- function(num) {
if(num > 0) {
return("+")
} else if(num == 0) {
return(0)
} else {
return("-")
}
}
sigma(-3)
sign(-3)
sign(3)
sign <- function(num) {
if(num > 0) {
return(+)
sign(3)
sign <- function(num) {
if(num > 0) {
return(+)
sign <- function(num) {
if(num > 0) {
return("+")
} else if(num == 0) {
return(0)
} else {
return("-")
}
}
sign(3)
sign(0)
sign <- function(num) {
if(num > 0) {
return("+")
} else if(num == 0) {
return("0")
} else {
return("-")
}
}
sign(0)
sign <- function(num) {
if(num > 0) {
return("+")
} else if(num == 0) {
return(0)
} else {
return("-")
}
}
sign(0)
if (1 > 0 && -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 > 0 && -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0.0 > 0 && -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0.1 > 0 && -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0.1 > 0 && -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0.1 > 0 && -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 > 0 && -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 > 0 || -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 > 0 || -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 > 0 && -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 > 0 || -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 == 0 && -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (0 == 0 || -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (1 == 0 || -1 < 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (1 == 0 || -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (1 == 0 || -1 > 0) {
print("at least one part is true")
} else {
print("neither part is true")
}
a <- 0
a
a == 0
a <- NA
a == 0
a <- na
a <- NA
a == 0
a == NA
if (a == NA) {
print("Hi!")
}
if (is.na(a)) {
print("Hi!")
}
a <-  0
if (is.na(a)) {
print("Hi!")
}
if (is.na(a)) {
print("Hi!")
} else {"bye!"}
x <- seq(10)
x
lenght(x)
lenght("x")
if (a == NA) {
print("Hi!")
}
plot_dist <- function(x, threshold) {
if (length(x) > threshold) {
boxplot(x)
} else {
stripchart(x)
}
}
plot_dist(x)
plot_dist(x, 5)
plot_dist(x, 10)
df <- data.frame(
Name = c("Alice", "Bob", "Charlie", "David"),
Age = c(25, 30, 35, 40),
Gender = c("Female", "Male", "Male", "Male")
)
dat <- read.csv("data/inflammation-01.csv", header = FALSE)
length(dat[1:5, 10])
dat <- dat[1:5, 10]
dat
dat <- dat[1:10, 10]
dat <- read.csv("data/inflammation-01.csv", header = FALSE)
dat <- dat[1:10, 10]
dat
length(dat[1:5, 10])
plot_dist <- function(x, threshold) {
if (length(x) > threshold) {
boxplot(x)
} else {
stripchart(x)
}
}
plot_dist(dat[,10], threshold = 10)
dat <- read.csv("data/inflammation-01.csv", header = FALSE)
plot_dist(dat[,10], threshold = 10)
dat <- read.csv("data/inflammation-01.csv", header = FALSE)
length(dat[1:5, 10])
plot_dist(dat[, 10], threshold = 10)     # day (column) 10
x <- seq(10)
length("x")
plot_dist <- function(x, threshold) {
if (length(x) > threshold) {
boxplot(x)
} else {
stripchart(x)
}
}
plot_dist(dat[,10], threshold = 10)
plot_dist_op <- function(x, threshold, use_boxplot = TRUE) {
if (length(x) > threshold && use_boxplot) {
boxplot(x)
} else if (length(x) > threshold && !use_boxplot) {
hist(x)
} else {
stripchart(x)
}
}
plot_dist_op <- function(x, threshold, use_boxplot = TRUE) {
if (length(x) > threshold && use_boxplot) {
boxplot(x)
} else if (length(x) > threshold && !use_boxplot) {
hist(x)
} else {
stripchart(x)
}
}
plot_dist_op(dat[, 10], threshold = 10)
plot_dist_op(dat[, 10], threshold = 10)
plot_dist_op(dat[, 10], threshold = 10, use_boxplot = FALSE)
filenames <- list.files(path = "data", pattern = "inflammation-[0-9]{2}.csv", full.names = TRUE)
filename_max <- "" # filename where the maximum average inflammation patient is found
patient_max <- 0 # index (row number) for this patient in this file
average_inf_max <- 0 # value of the average inflammation score for this patient
for (f in filenames) {
dat <- read.csv(file = f, header = FALSE)
dat.means <- apply(dat, 1, mean)
for (patient_index in 1:length(dat.means)){
patient_average_inf <- dat.means[patient_index]
if (patient_average_inf > average_inf_max) {
average_inf_max <- patient_average_inf
filename_max <- f
patient_max <- patient_index
}# Add your code here ...
}
}
print(filename_max)
print(patient_max)
print(average_inf_max)
x <- 0,1,2,0,3,4,4,6,8,6,8,9,9,10,11,13,16,5,6,15,10,16,14,11,16,15,10,9,10,10,5,5,8,7,5,3,2,3,1,
x <- 0,1,2,0,3,4,4,6,8,6,8,9,9,10,11,13,16,5,6,15,10,16,14,11,16,15,10,9,10,10,5,5,8,7,5,3,2,3,1,
x <- c(0,1,2,0,3,4,4,6,8,6,8,9,9,10,11,13,16,5,6,15,10,16,14,11,16,15,10,9,10,10,5,5,8,7,5,3,2,3,1,1)
mean(x)
?read.csv
dat <- read.csv("data/inflammation-01.csv", header = FALSE)
dat.means <- apply(dat, 1, mean)
dat.means
length(data.meas)
length(data.means)
length(dat.means)
?pdf()
analyze <- function(filename, output = NULL) {
# Plots the average, min, and max inflammation over time.
# Input:
#    filename: character string of a csv file
#    output: character string of pdf file for saving
if (!is.null(output)) {
pdf(output)
}
dat <- read.csv(file = filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
if (!is.null(output)) {
dev.off()
}
}
analyze_all("data/inflammation-01.csv")
analyze("data/inflammation-01.csv")
dir.create("results")
analyze("data/inflammation-01.csv", output = "results/inflammation-01.pdf")
f <- "inflammation-01.csv"
sub("csv", "pdf", f)
file.path()
file.path
?file.path
?list.files
x <- 1
x <- 2
x
args <- commandArgs(trailingOnly = TRUE)
pattern <- args[1]
files <- list.files(pattern = pattern)
cat(files, sep = "\n")
interim_object <- data.frame(rep(1:100, 10),
rep(101:200, 10),
rep(201:300, 10))
interim_object
x <- rep(1:100, 10)
x
# Sample dataset of 1000 rows
interim_object <- data.frame(rep(1:100, 10),
rep(101:200, 10),
rep(201:300, 10))
object.size(interim_object) # Reports the memory size allocated to the object
rm("interim_object") # Removes only the object itself and not necessarily the memory allotted to it
gc() # Force R to release memory it is no longer using
ls() # Lists all the objects in your current workspace
rm(list = ls()) # If you want to delete all the objects in the workspace and start with a clean slate
install.packages("knitr")
them in $, e.g., $\alpha = \dfrac{1}{(1 - \beta)^2}$ renders as: α=1(1−β)2
$\alpha = \dfrac{1}{(1 - \beta)^2}$ renders as: α=1(1−β)2
library(devtools)
library(roxygen2)
library("roxygen2")
library("devtools")
setwd(".")
pwd()
pwd
create_package("tempConvert")
2
here::dr_here()
setwd(parentDirectory)
setwd("../")
wd()
create_package("tempConvert")
setwd("../package")
setwd("../package/")
setwd("C:/Users/carlo/OneDrive/!trb/@prog/package-sfwcrpt/tempConvert")
document()
library(devtools)
library(roxygen2)
document()
install("tempConvert")
getwd()
setwd("..")
getwd()
install("tempConvert")
?fahrenheit_to_celsius
